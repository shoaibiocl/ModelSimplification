from scipy import stats
from fitter import Fitter
from simple_colors import *
from scipy import *
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
import numpy as np
from iteration_utilities import deepflatten


def abstraction(output2):
    output2 = list(deepflatten(output2, depth=1))
    params = {}
    list_of_dists = ['alpha', 'anglit', 'arcsine', 'argus','beta','betaprime','bradford',
                    'burr','burr12','cauchy','chi','chi2','cosine','crystalball','dgamma',
                    'dweibull','erlang','expon','exponnorm','exponweib','exponpow','f','fatiguelife',
                    'fisk','foldcauchy','foldnorm','genlogistic','gennorm','genpareto','genexpon',
                    'genextreme','gausshyper','gamma','gengamma','genhalflogistic','genhyperbolic',
                    'geninvgauss','gilbrat','gompertz','gumbel_r','gumbel_l','halfcauchy','halflogistic',
                    'halfnorm','halfgennorm','hypsecant','invgamma','invgauss','invweibull','johnsonsb',
                    'johnsonsu','kappa4','kappa3','ksone','laplace',
                    'laplace_asymmetric','levy','levy_l','logistic','loggamma',
                    'loglaplace','lognorm','loguniform','lomax','maxwell','mielke','moyal','nakagami',
                    'ncx2','ncf','nct','norm','norminvgauss','pareto','pearson3','powerlaw','powerlognorm',
                    'powernorm','rdist','rayleigh','rice','recipinvgauss','semicircular','skewcauchy',
                    'skewnorm','t','trapezoid','triang','truncexpon','truncnorm',
                    'tukeylambda','uniform','vonmises','vonmises_line','wald','weibull_min','weibull_max',
                    'wrapcauchy']
    

    results = []
    for i in list_of_dists:
        #print(i)
        dist = getattr(stats, i)
        param = dist.fit(output2)
        a = stats.kstest(output2, i, args=param)
        results.append((i, a[0], a[1]))
        params[i] = param

    results.sort(key=lambda x:float(x[2]), reverse=True)
    i = 0
    print("Best distribution based on p-value")
    
    for j in results:
        if round(j[2],3) >= 0.5:
            print("{}:,statistic={}, pvalue={}".format(j[0], j[1], round(j[2],3)))
            if i < 1:
                dist = getattr(stats, j[0])
                p_value = j[2]
                round_param = [round(num, 2) for num in param]
                print(black("Replace your code block with:", 'bold'))
                print("yield self.hold(stats.{}.rvs{})".format(j[0], param))
                i += 1
        
    print("*"*100)
    print("*"*100)
    print("Now showing results based on SSE")

    f = Fitter(output2, distributions= list_of_dists,  timeout=30)
    f.fit()
    #print("The best distribution along with the parameters based on SSE")
    best_dist = f.get_best(method = 'sumsquare_error')
    #print(best_dist)
    print("Best five distributions based on SSE")
    print(f.summary())
    if p_value < 0.05:
        print('\033[1m' + "None of the distributions fit the data, try non-parametric 'np_abstraction' method"+'\033[0m')
    else:
        print(black("Replace the code block by:","bold"))
        p1 = f.get_best(method = 'sumsquare_error')
        p = list(p1.keys())
        #round_t = [round(num, 2) for num in f.fitted_param[(p[0])]]
        #print(round_t)
        print("yield self.hold(stats.{}.rvs{})".format(p[0],f.fitted_param[(p[0])]))
       
